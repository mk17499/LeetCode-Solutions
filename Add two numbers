**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode * new_node(int v)
{
    struct ListNode* temp = (struct ListNode*)malloc(sizeof(struct ListNode));
    temp->val= v;
    temp->next = NULL;
    return temp;
}
int max(int a, int b)
{
    return a>=b ? a : b;
}
int min(int a, int b)
{
    return a<=b ? a : b;
}
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)
{
    int n1,n2;
    n1 = 0;
    n2 = 0;
    
    struct ListNode* ptr1 = l1;
    struct ListNode* ptr2 = l2;
    
    while(ptr1!=NULL)
    {
        n1++;
        ptr1=ptr1->next;
    }
    while(ptr2!=NULL)
    {
        n2++;
        ptr2=ptr2->next;
    }
    
    ptr1 = l1;
    ptr2 = l2;
    
    int carry = 0;
    
    int m = max(n1,n2);
    
    struct ListNode *end = new_node(0);
    struct ListNode *start = end;
    struct ListNode *temp = start;
    
    for(int i = 0;i<m-1;i++)
    {
        end->next = new_node(0);
        end = end->next;
    }
    
    struct ListNode *t = start;
    
    while(t->next!= NULL)
        t = t->next;
    
    
    if( n1 > n2 )
    {
        for(int i = 0;i<n2;i++)
        {
            temp->val = (ptr1->val + ptr2->val + carry)%10;
            carry = (ptr1->val + ptr2->val + carry)/10;
            temp = temp->next;
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        for(int i = 0;i<(n1-n2);i++)
        {
            temp->val = (ptr1->val + carry)%10;
            carry = (ptr1->val + carry)/10;
            ptr1 = ptr1->next;
            temp = temp->next;
        }
        if(carry!=0)
        {
            t->next = new_node(carry);
        }
    }
    else if(n1 < n2)
    {
        for(int i = 0;i<n1;i++)
        {
            temp->val = (ptr1->val + ptr2->val + carry)%10;
            carry = (ptr1->val + ptr2->val + carry)/10;
            temp = temp->next;
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        for(int i = 0;i<(n2-n1);i++)
        {
            temp->val = (ptr2->val + carry)%10;
            carry = (ptr2->val + carry)/10;
            ptr2 = ptr2->next;
            temp = temp->next;
        }
        if(carry!=0)
        {
            t->next = new_node(carry);
        }
    }
    else 
    {
        for(int i = 0;i<min(n1,n2);i++)
        {
            temp->val = (ptr1->val + ptr2->val + carry)%10;
            carry = (ptr1->val + ptr2->val + carry)/10;
            temp = temp->next;
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        if(carry!=0)
        {
            t->next = new_node(carry);
        }
    }
    
    return start;
}
